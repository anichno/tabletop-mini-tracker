use std::collections::HashMap;

use mouse_vision::{
    find_dots, generate_brightness_map, get_code_points, reconstruct_grid, smooth_image, CodePoint,
    Direction, Image,
};

const GRID_2_SPACING_1748026902: [u8; 1296] = [
    0, 1, 2, 5, 17, 23, 22, 14, 3, 3, 4, 4, 22, 35, 42, 38, 12, 5, 4, 6, 12, 35, 43, 41, 17, 8, 6,
    4, 11, 30, 35, 34, 18, 4, 6, 6, 4, 4, 4, 14, 25, 26, 23, 20, 7, 4, 6, 11, 36, 46, 47, 42, 16,
    9, 9, 10, 40, 52, 58, 51, 24, 9, 8, 10, 18, 39, 36, 41, 25, 8, 6, 7, 13, 14, 17, 24, 31, 29,
    32, 30, 24, 19, 20, 39, 54, 54, 49, 47, 32, 16, 17, 19, 50, 56, 60, 53, 48, 22, 18, 23, 35, 49,
    47, 46, 45, 26, 16, 18, 10, 11, 16, 22, 24, 32, 34, 34, 30, 34, 35, 51, 62, 59, 52, 57, 42, 37,
    45, 47, 57, 61, 64, 62, 60, 40, 50, 47, 49, 62, 61, 56, 58, 44, 38, 28, 10, 9, 10, 16, 27, 33,
    34, 38, 29, 24, 26, 38, 60, 70, 74, 60, 40, 34, 37, 35, 64, 75, 70, 71, 62, 47, 36, 45, 70, 69,
    68, 62, 52, 35, 23, 26, 2, 3, 4, 11, 27, 34, 44, 29, 15, 11, 10, 22, 67, 82, 80, 64, 33, 19,
    13, 25, 60, 80, 76, 74, 43, 26, 19, 20, 51, 66, 66, 69, 55, 22, 14, 12, 2, 2, 4, 9, 30, 48, 44,
    26, 9, 8, 8, 18, 69, 84, 80, 69, 20, 9, 8, 11, 49, 77, 84, 73, 29, 12, 11, 13, 34, 68, 75, 66,
    50, 14, 8, 9, 5, 4, 7, 19, 40, 47, 48, 29, 8, 10, 12, 25, 69, 87, 73, 67, 20, 7, 7, 10, 44, 83,
    83, 75, 26, 9, 9, 11, 29, 67, 78, 70, 43, 15, 10, 8, 14, 12, 17, 35, 46, 49, 62, 37, 18, 15,
    18, 50, 86, 84, 85, 73, 28, 12, 13, 16, 64, 84, 81, 80, 38, 17, 12, 16, 33, 68, 72, 66, 54, 28,
    15, 15, 32, 35, 41, 50, 51, 62, 63, 60, 55, 48, 51, 70, 80, 89, 93, 76, 63, 35, 22, 50, 76, 88,
    86, 89, 68, 43, 46, 37, 60, 78, 69, 67, 74, 61, 41, 37, 35, 38, 49, 53, 60, 66, 66, 56, 67, 70,
    70, 79, 86, 93, 92, 81, 85, 74, 73, 89, 94, 81, 89, 94, 93, 91, 82, 75, 84, 74, 73, 74, 77, 77,
    74, 68, 30, 31, 37, 47, 60, 54, 65, 65, 68, 66, 68, 77, 87, 93, 87, 87, 75, 74, 73, 97, 97, 88,
    101, 104, 102, 90, 84, 89, 75, 79, 80, 83, 82, 75, 69, 62, 17, 17, 29, 47, 62, 61, 60, 62, 50,
    39, 52, 67, 80, 86, 88, 83, 67, 57, 60, 76, 93, 98, 111, 112, 91, 77, 73, 53, 64, 87, 83, 97,
    71, 60, 52, 45, 6, 6, 10, 35, 55, 58, 59, 53, 23, 15, 24, 44, 73, 83, 85, 73, 51, 35, 40, 45,
    84, 101, 106, 106, 77, 41, 43, 46, 51, 87, 91, 93, 70, 41, 23, 20, 4, 6, 7, 22, 55, 61, 63, 34,
    10, 8, 10, 24, 74, 90, 86, 69, 22, 10, 12, 25, 73, 98, 94, 98, 64, 20, 16, 22, 58, 86, 84, 86,
    56, 20, 15, 11, 4, 5, 9, 35, 55, 66, 65, 29, 10, 10, 12, 26, 82, 87, 87, 58, 14, 12, 12, 18,
    64, 86, 99, 96, 47, 15, 14, 16, 42, 85, 96, 86, 66, 19, 12, 10, 8, 9, 20, 51, 65, 67, 69, 40,
    17, 13, 18, 39, 81, 88, 89, 55, 20, 14, 14, 24, 75, 92, 101, 87, 39, 19, 15, 20, 57, 86, 96,
    94, 72, 36, 16, 15, 32, 36, 48, 66, 65, 71, 71, 66, 38, 27, 38, 65, 87, 86, 87, 69, 35, 19, 29,
    50, 97, 95, 89, 108, 64, 37, 28, 41, 91, 107, 94, 92, 88, 57, 31, 36, 56, 60, 54, 63, 61, 75,
    80, 72, 68, 63, 79, 91, 91, 81, 86, 84, 85, 65, 63, 76, 91, 108, 108, 117, 95, 80, 68, 90, 104,
    110, 101, 100, 99, 78, 71, 80, 41, 48, 39, 58, 57, 79, 83, 84, 66, 68, 75, 88, 88, 87, 89, 86,
    92, 88, 89, 96, 103, 102, 107, 118, 116, 87, 92, 109, 113, 111, 110, 108, 97, 83, 70, 67, 26,
    28, 35, 60, 60, 72, 86, 75, 59, 51, 64, 86, 100, 94, 98, 89, 85, 78, 85, 85, 106, 98, 108, 106,
    98, 89, 96, 100, 108, 103, 106, 103, 89, 65, 50, 52, 14, 11, 17, 51, 63, 72, 74, 58, 34, 29,
    38, 70, 97, 104, 84, 82, 63, 56, 64, 80, 99, 110, 105, 96, 77, 61, 69, 78, 90, 98, 102, 97, 79,
    53, 35, 38, 6, 5, 9, 40, 63, 72, 69, 35, 14, 13, 16, 53, 86, 101, 86, 75, 32, 18, 25, 47, 99,
    101, 106, 88, 52, 31, 29, 40, 86, 97, 102, 98, 65, 21, 13, 21, 6, 6, 9, 42, 65, 72, 67, 27, 10,
    7, 11, 38, 83, 93, 80, 49, 16, 14, 14, 28, 79, 97, 90, 75, 25, 16, 16, 25, 74, 97, 103, 95, 51,
    19, 16, 15, 7, 8, 15, 42, 66, 65, 65, 25, 11, 11, 15, 40, 89, 89, 97, 59, 21, 19, 15, 36, 79,
    91, 93, 79, 31, 20, 17, 26, 81, 104, 105, 95, 44, 22, 15, 14, 16, 16, 27, 56, 67, 64, 67, 35,
    19, 16, 24, 53, 89, 90, 92, 70, 28, 20, 24, 50, 100, 99, 96, 91, 36, 17, 20, 35, 78, 94, 104,
    93, 53, 24, 17, 20, 38, 35, 50, 63, 64, 65, 68, 68, 66, 52, 69, 94, 101, 88, 85, 104, 68, 53,
    51, 82, 93, 101, 100, 96, 71, 41, 55, 72, 98, 98, 93, 87, 65, 44, 42, 51, 35, 35, 49, 58, 67,
    69, 71, 72, 78, 84, 89, 103, 98, 85, 100, 110, 99, 89, 97, 102, 102, 109, 100, 88, 76, 82, 99,
    98, 97, 96, 93, 89, 84, 73, 77, 74, 24, 24, 30, 52, 50, 59, 61, 66, 56, 67, 79, 86, 91, 64, 96,
    96, 88, 83, 92, 96, 115, 110, 94, 79, 70, 80, 92, 91, 100, 91, 89, 90, 89, 78, 68, 58, 11, 11,
    20, 38, 51, 55, 56, 43, 41, 45, 46, 69, 87, 86, 88, 85, 70, 54, 65, 92, 105, 102, 100, 76, 71,
    73, 79, 68, 89, 99, 96, 84, 71, 54, 45, 43, 5, 5, 9, 28, 44, 53, 49, 31, 13, 16, 17, 50, 77,
    83, 80, 61, 38, 22, 20, 58, 90, 93, 96, 89, 58, 44, 35, 44, 75, 89, 93, 75, 50, 34, 23, 21, 3,
    5, 8, 22, 39, 49, 43, 14, 6, 7, 9, 34, 71, 73, 73, 43, 13, 9, 11, 37, 81, 80, 88, 80, 27, 16,
    16, 21, 55, 76, 80, 65, 37, 17, 12, 16, 4, 4, 8, 19, 34, 41, 37, 16, 8, 9, 11, 32, 56, 73, 70,
    26, 11, 9, 10, 18, 71, 83, 84, 68, 22, 14, 14, 17, 42, 70, 70, 60, 27, 14, 11, 14, 4, 7, 10,
    23, 31, 38, 34, 17, 9, 7, 16, 34, 64, 70, 63, 33, 16, 15, 17, 24, 71, 81, 76, 57, 24, 17, 17,
    20, 53, 67, 67, 56, 29, 18, 15, 12, 16, 15, 17, 24, 26, 24, 28, 24, 29, 27, 37, 48, 62, 65, 69,
    51, 24, 24, 42, 61, 70, 74, 76, 69, 46, 24, 23, 42, 61, 60, 51, 50, 36, 24, 19, 20, 22, 17, 17,
    25, 27, 29, 31, 34, 40, 41, 43, 52, 58, 56, 64, 62, 60, 62, 68, 76, 70, 71, 69, 65, 62, 62, 58,
    51, 58, 51, 52, 54, 50, 41, 33, 33,
];

const GRID_2_SPACING_45_DEG_1748026976: [u8; 1296] = [
    2, 2, 3, 3, 9, 16, 20, 16, 17, 22, 23, 17, 9, 4, 7, 12, 27, 32, 35, 30, 31, 30, 40, 32, 16, 14,
    13, 21, 31, 27, 26, 21, 21, 19, 21, 19, 8, 7, 7, 8, 17, 20, 17, 18, 16, 17, 26, 23, 26, 12, 13,
    32, 37, 42, 38, 28, 25, 34, 42, 43, 44, 37, 41, 44, 36, 30, 18, 17, 16, 20, 24, 24, 11, 14, 19,
    18, 23, 22, 19, 14, 11, 12, 28, 38, 34, 38, 40, 38, 48, 42, 34, 20, 16, 26, 46, 51, 37, 50, 46,
    51, 40, 25, 15, 12, 11, 16, 28, 29, 13, 15, 19, 22, 22, 23, 12, 5, 2, 7, 24, 37, 43, 48, 53,
    51, 57, 44, 18, 9, 7, 18, 46, 64, 56, 53, 56, 55, 42, 20, 9, 8, 9, 12, 29, 36, 17, 20, 20, 26,
    26, 22, 5, 3, 2, 6, 23, 45, 53, 52, 60, 57, 60, 43, 14, 8, 8, 12, 42, 72, 70, 62, 65, 63, 58,
    19, 9, 8, 5, 14, 27, 41, 17, 20, 19, 26, 28, 25, 8, 4, 4, 8, 26, 59, 51, 59, 68, 58, 63, 42,
    12, 6, 7, 15, 45, 70, 69, 64, 63, 58, 54, 31, 12, 10, 11, 18, 50, 46, 18, 20, 22, 24, 32, 28,
    11, 5, 7, 13, 45, 64, 64, 58, 62, 65, 63, 65, 30, 17, 15, 40, 71, 77, 65, 57, 65, 56, 61, 64,
    39, 26, 33, 40, 45, 46, 19, 17, 18, 21, 32, 40, 32, 26, 24, 32, 65, 70, 59, 52, 47, 54, 70, 72,
    78, 56, 51, 73, 79, 75, 55, 38, 44, 58, 63, 76, 72, 64, 66, 66, 58, 49, 12, 12, 10, 10, 25, 40,
    46, 46, 50, 49, 72, 62, 51, 32, 26, 36, 51, 64, 81, 78, 87, 87, 92, 67, 43, 19, 19, 39, 65, 75,
    75, 71, 75, 73, 58, 45, 7, 4, 3, 5, 17, 40, 50, 55, 50, 75, 74, 61, 34, 14, 12, 14, 50, 64, 68,
    86, 84, 78, 84, 59, 19, 7, 11, 19, 50, 74, 78, 76, 83, 79, 66, 38, 6, 3, 3, 3, 12, 35, 49, 63,
    69, 73, 75, 58, 15, 9, 7, 6, 39, 58, 70, 87, 88, 81, 87, 58, 16, 8, 9, 16, 47, 73, 91, 84, 78,
    81, 67, 40, 6, 2, 3, 3, 12, 48, 58, 60, 68, 75, 76, 59, 20, 12, 7, 10, 45, 76, 66, 79, 87, 94,
    86, 73, 25, 12, 12, 22, 68, 84, 84, 73, 69, 82, 78, 66, 13, 5, 6, 9, 23, 51, 62, 56, 67, 68,
    79, 77, 45, 20, 15, 28, 67, 79, 71, 70, 83, 91, 102, 87, 45, 26, 25, 45, 86, 88, 78, 61, 56,
    68, 72, 69, 32, 21, 16, 29, 37, 55, 45, 51, 43, 59, 78, 85, 76, 48, 48, 61, 74, 76, 62, 61, 73,
    80, 94, 96, 79, 69, 62, 82, 88, 75, 71, 47, 37, 54, 61, 67, 42, 50, 44, 52, 54, 48, 39, 27, 22,
    35, 63, 78, 78, 72, 78, 83, 68, 74, 53, 37, 40, 63, 82, 97, 96, 97, 97, 91, 93, 67, 33, 20, 18,
    28, 57, 69, 39, 53, 52, 61, 60, 51, 22, 10, 8, 17, 51, 78, 77, 81, 84, 80, 65, 65, 34, 16, 17,
    25, 58, 102, 105, 89, 94, 95, 91, 57, 24, 14, 13, 17, 43, 65, 38, 52, 49, 50, 72, 54, 17, 6, 8,
    11, 35, 65, 87, 75, 83, 92, 78, 68, 21, 11, 11, 14, 43, 88, 102, 97, 101, 101, 91, 67, 21, 13,
    11, 17, 44, 75, 47, 48, 55, 52, 55, 57, 19, 10, 10, 13, 31, 51, 76, 64, 76, 78, 79, 64, 23, 16,
    17, 19, 61, 103, 98, 98, 93, 97, 95, 65, 36, 19, 19, 26, 61, 78, 46, 53, 42, 49, 60, 59, 33,
    15, 14, 24, 52, 76, 86, 75, 74, 81, 84, 87, 45, 30, 24, 34, 97, 106, 79, 82, 86, 83, 93, 83,
    67, 45, 44, 53, 74, 78, 31, 39, 33, 39, 58, 64, 60, 41, 36, 51, 78, 84, 70, 63, 55, 66, 68, 88,
    75, 65, 49, 76, 90, 108, 87, 51, 65, 68, 92, 100, 89, 89, 90, 86, 83, 64, 33, 20, 20, 31, 46,
    62, 72, 66, 72, 71, 78, 78, 61, 43, 31, 41, 65, 81, 88, 91, 84, 97, 97, 94, 61, 32, 28, 36, 71,
    90, 88, 94, 95, 77, 86, 51, 24, 13, 7, 12, 31, 57, 71, 82, 71, 82, 79, 74, 49, 24, 11, 17, 52,
    81, 92, 98, 101, 106, 114, 84, 49, 15, 16, 21, 56, 89, 90, 89, 83, 79, 84, 65, 16, 5, 3, 6, 17,
    59, 74, 87, 79, 80, 70, 80, 24, 14, 8, 15, 28, 83, 94, 102, 106, 109, 102, 84, 28, 17, 14, 16,
    51, 85, 92, 92, 88, 84, 81, 70, 13, 7, 5, 7, 18, 55, 68, 78, 83, 80, 70, 78, 26, 13, 11, 12,
    29, 82, 88, 99, 105, 104, 99, 69, 37, 20, 18, 20, 54, 78, 89, 91, 86, 82, 86, 68, 24, 11, 9,
    16, 36, 56, 65, 73, 74, 77, 88, 78, 48, 21, 18, 18, 48, 87, 79, 92, 93, 95, 115, 91, 82, 44,
    35, 66, 95, 93, 83, 76, 71, 76, 79, 74, 41, 31, 25, 35, 54, 60, 54, 54, 56, 64, 71, 85, 74, 54,
    37, 48, 83, 86, 88, 73, 57, 73, 95, 100, 88, 92, 89, 102, 98, 94, 78, 64, 52, 48, 61, 72, 46,
    38, 45, 58, 65, 67, 50, 33, 36, 38, 59, 84, 95, 76, 79, 84, 91, 87, 67, 45, 33, 52, 72, 102,
    94, 106, 103, 100, 93, 81, 59, 31, 24, 24, 41, 55, 46, 45, 46, 54, 66, 64, 45, 15, 9, 14, 32,
    80, 84, 85, 89, 90, 100, 85, 42, 18, 12, 21, 43, 99, 103, 103, 111, 100, 86, 81, 44, 17, 13,
    14, 29, 50, 45, 42, 46, 49, 53, 57, 27, 10, 8, 7, 21, 68, 84, 86, 82, 91, 98, 74, 25, 17, 14,
    14, 30, 90, 107, 92, 113, 98, 102, 74, 34, 16, 16, 15, 22, 46, 50, 34, 44, 47, 52, 46, 26, 8,
    8, 10, 22, 65, 81, 67, 88, 82, 99, 76, 38, 20, 14, 18, 37, 95, 101, 114, 108, 93, 93, 81, 41,
    27, 20, 20, 33, 44, 46, 28, 36, 40, 38, 39, 33, 19, 10, 17, 51, 75, 73, 69, 71, 71, 96, 99, 77,
    39, 25, 28, 58, 91, 99, 90, 92, 88, 87, 87, 79, 46, 37, 48, 58, 49, 33, 23, 19, 30, 36, 43, 44,
    48, 31, 37, 52, 70, 66, 58, 56, 60, 73, 86, 86, 93, 67, 81, 84, 97, 82, 67, 58, 61, 71, 81, 80,
    75, 65, 65, 66, 60, 28, 12, 10, 14, 26, 42, 50, 54, 62, 64, 64, 52, 53, 39, 27, 35, 51, 75, 89,
    96, 91, 94, 101, 82, 69, 39, 19, 29, 42, 65, 75, 79, 68, 64, 57, 54, 13, 8, 4, 7, 18, 38, 51,
    53, 58, 64, 69, 62, 36, 12, 11, 17, 37, 74, 78, 91, 93, 87, 85, 79, 50, 17, 12, 12, 23, 41, 61,
    66, 56, 55, 51, 43, 9, 4, 4, 5, 10, 32, 44, 50, 53, 59, 64, 60, 21, 9, 9, 11, 16, 65, 80, 91,
    87, 79, 73, 70, 40, 16, 11, 11, 18, 36, 51, 54, 50, 47, 44, 35, 11, 5, 6, 8, 14, 31, 37, 41,
    50, 51, 59, 50, 23, 11, 11, 12, 22, 56, 78, 83, 78, 74, 73, 64, 42, 18, 15, 14, 24, 35, 47, 50,
    45, 35, 37, 31,
];

const SAMPLE_0_4_1748027490: [u8; 1296] = [
    8, 14, 10, 5, 4, 3, 7, 15, 19, 24, 14, 5, 3, 2, 5, 15, 37, 44, 46, 48, 46, 38, 51, 48, 47, 46,
    37, 9, 6, 6, 5, 6, 16, 25, 25, 19, 10, 14, 8, 2, 2, 1, 5, 17, 22, 21, 18, 9, 8, 6, 8, 23, 47,
    56, 59, 55, 51, 49, 52, 53, 56, 54, 43, 15, 8, 7, 3, 8, 16, 26, 28, 20, 13, 11, 9, 4, 2, 4, 6,
    14, 22, 17, 22, 20, 18, 24, 35, 57, 63, 66, 64, 61, 57, 51, 62, 47, 60, 65, 46, 21, 10, 6, 7,
    9, 22, 30, 32, 28, 16, 14, 10, 8, 1, 4, 8, 18, 18, 14, 8, 15, 28, 51, 59, 64, 63, 67, 74, 67,
    59, 55, 61, 54, 69, 68, 58, 38, 12, 10, 10, 10, 35, 38, 38, 39, 20, 21, 18, 9, 9, 6, 17, 20,
    14, 6, 6, 7, 19, 54, 61, 73, 75, 89, 83, 70, 66, 57, 55, 64, 72, 76, 81, 66, 28, 16, 19, 25,
    42, 42, 48, 52, 21, 22, 23, 21, 18, 14, 34, 33, 11, 7, 5, 7, 18, 68, 77, 74, 78, 91, 80, 58,
    47, 43, 43, 59, 76, 83, 74, 69, 50, 55, 54, 62, 64, 58, 65, 58, 23, 26, 27, 26, 29, 22, 38, 43,
    18, 9, 9, 14, 30, 75, 86, 90, 77, 77, 68, 32, 20, 17, 16, 39, 74, 82, 83, 78, 69, 69, 62, 60,
    79, 69, 65, 58, 24, 26, 26, 20, 20, 20, 32, 50, 33, 17, 26, 39, 65, 90, 97, 91, 90, 89, 74, 31,
    12, 10, 15, 31, 77, 85, 87, 80, 58, 52, 50, 56, 62, 73, 72, 68, 17, 22, 20, 10, 7, 12, 32, 46,
    60, 68, 56, 67, 79, 89, 91, 89, 92, 93, 86, 24, 12, 12, 14, 28, 91, 91, 81, 70, 46, 29, 28, 39,
    51, 72, 71, 69, 12, 20, 13, 7, 4, 6, 16, 52, 64, 59, 62, 68, 65, 87, 96, 88, 91, 89, 78, 35,
    17, 17, 20, 41, 88, 78, 86, 51, 18, 13, 11, 18, 36, 64, 69, 67, 7, 17, 10, 3, 4, 5, 14, 50, 55,
    48, 50, 54, 65, 84, 91, 81, 90, 69, 57, 36, 36, 37, 60, 79, 95, 95, 85, 47, 16, 11, 11, 15, 28,
    62, 70, 57, 6, 15, 13, 6, 4, 6, 14, 43, 39, 25, 20, 26, 47, 85, 84, 85, 69, 38, 36, 42, 50, 87,
    98, 97, 99, 89, 82, 40, 16, 14, 12, 17, 42, 74, 67, 74, 4, 9, 28, 13, 7, 10, 22, 54, 21, 9, 8,
    10, 26, 70, 81, 83, 52, 22, 14, 16, 28, 77, 92, 96, 101, 102, 94, 72, 34, 25, 18, 29, 69, 75,
    79, 76, 4, 10, 36, 35, 22, 32, 42, 61, 20, 10, 7, 10, 19, 61, 79, 85, 51, 15, 13, 12, 22, 71,
    99, 104, 101, 99, 96, 92, 76, 66, 69, 69, 79, 88, 73, 66, 6, 17, 38, 40, 39, 48, 64, 65, 29, 9,
    7, 11, 19, 67, 71, 82, 54, 15, 12, 15, 24, 68, 100, 101, 107, 104, 102, 99, 87, 75, 78, 76, 83,
    82, 79, 61, 16, 34, 44, 34, 30, 43, 59, 80, 59, 27, 18, 22, 50, 74, 85, 93, 68, 36, 25, 25, 43,
    77, 100, 93, 104, 98, 106, 93, 83, 62, 63, 76, 73, 71, 62, 72, 32, 48, 37, 26, 18, 20, 53, 75,
    86, 72, 65, 64, 83, 75, 71, 92, 77, 81, 75, 61, 74, 98, 98, 101, 99, 98, 99, 90, 66, 48, 47,
    61, 82, 62, 73, 73, 45, 44, 29, 10, 9, 13, 31, 75, 86, 92, 93, 91, 84, 88, 82, 84, 87, 85, 89,
    84, 88, 88, 96, 109, 100, 94, 98, 72, 32, 22, 24, 35, 56, 79, 85, 87, 44, 43, 21, 7, 6, 7, 19,
    66, 88, 90, 90, 97, 81, 71, 86, 96, 89, 77, 69, 82, 89, 102, 108, 101, 98, 108, 95, 46, 17, 19,
    15, 24, 57, 80, 83, 83, 40, 41, 18, 7, 8, 9, 18, 65, 78, 88, 94, 92, 71, 83, 81, 83, 83, 58,
    55, 57, 78, 95, 81, 87, 103, 85, 77, 50, 23, 16, 14, 27, 61, 73, 78, 73, 46, 45, 25, 11, 9, 12,
    33, 72, 86, 104, 95, 92, 84, 75, 82, 75, 61, 21, 21, 21, 57, 78, 82, 94, 97, 85, 80, 59, 33,
    18, 20, 38, 68, 81, 85, 74, 49, 51, 41, 27, 20, 34, 65, 91, 72, 102, 88, 82, 75, 59, 67, 74,
    34, 13, 10, 16, 35, 84, 101, 102, 80, 88, 90, 68, 68, 52, 49, 64, 84, 80, 84, 70, 47, 51, 43,
    53, 60, 65, 69, 97, 102, 97, 95, 66, 47, 30, 40, 66, 35, 16, 14, 17, 31, 73, 103, 87, 89, 91,
    97, 97, 98, 95, 97, 91, 80, 79, 82, 76, 53, 52, 53, 57, 70, 75, 89, 86, 106, 99, 75, 29, 11,
    10, 14, 37, 64, 24, 19, 23, 40, 87, 105, 97, 95, 96, 93, 94, 92, 82, 79, 75, 79, 84, 84, 72,
    47, 51, 53, 55, 64, 69, 61, 85, 81, 89, 53, 12, 8, 7, 12, 25, 72, 50, 45, 69, 104, 106, 109,
    116, 100, 90, 86, 86, 78, 54, 51, 51, 65, 72, 74, 60, 42, 46, 53, 57, 61, 70, 76, 71, 79, 83,
    49, 11, 6, 4, 11, 21, 75, 67, 85, 86, 103, 103, 106, 100, 88, 91, 92, 78, 46, 25, 24, 36, 49,
    56, 50, 46, 36, 46, 52, 63, 68, 64, 61, 74, 73, 63, 46, 12, 9, 6, 8, 37, 83, 88, 90, 82, 89,
    107, 92, 101, 92, 94, 86, 57, 23, 14, 12, 17, 35, 46, 45, 36, 22, 33, 53, 57, 52, 52, 37, 34,
    40, 57, 57, 16, 9, 8, 15, 30, 80, 72, 57, 79, 67, 97, 98, 99, 101, 99, 106, 65, 20, 17, 11, 12,
    31, 35, 35, 30, 8, 19, 37, 44, 40, 29, 18, 12, 14, 35, 57, 22, 11, 8, 12, 47, 76, 28, 24, 29,
    71, 99, 102, 106, 113, 117, 114, 81, 33, 16, 13, 17, 36, 36, 19, 14, 5, 14, 36, 44, 48, 16, 8,
    7, 9, 22, 70, 50, 24, 19, 26, 70, 35, 14, 16, 15, 29, 80, 95, 114, 107, 114, 115, 97, 60, 35,
    27, 43, 61, 30, 19, 11, 7, 14, 35, 44, 42, 13, 7, 8, 7, 23, 74, 76, 43, 67, 78, 80, 26, 15, 14,
    14, 23, 67, 102, 104, 99, 105, 106, 94, 85, 80, 80, 71, 60, 32, 17, 10, 6, 18, 28, 39, 42, 22,
    8, 10, 10, 36, 68, 55, 57, 81, 83, 67, 37, 16, 14, 16, 25, 79, 87, 93, 99, 90, 94, 90, 79, 87,
    76, 74, 66, 35, 18, 15, 11, 18, 26, 32, 43, 37, 24, 21, 24, 53, 65, 55, 48, 60, 63, 69, 58, 41,
    27, 36, 60, 69, 70, 74, 80, 76, 76, 74, 86, 75, 70, 68, 61, 50, 35, 25, 16, 17, 24, 28, 37, 41,
    34, 43, 45, 52, 54, 33, 31, 33, 45, 68, 71, 65, 40, 49, 60, 75, 71, 66, 67, 70, 70, 74, 71, 61,
    58, 55, 50, 52, 45, 35, 15, 13, 16, 24, 31, 34, 37, 39, 50, 45, 39, 14, 10, 10, 20, 54, 68, 62,
    51, 67, 70, 64, 62, 59, 60, 61, 58, 60, 58, 49, 48, 47, 45, 42, 38, 30, 10, 10, 11, 18, 26, 30,
    25, 30, 44, 48, 26, 12, 7, 7, 13, 26, 62, 61, 66, 59, 61, 61, 42, 37, 36, 37, 46, 47, 51, 49,
    47, 45, 43, 39, 38, 29,
];

const SAMPLE_1_4_1751926548: [u8; 1296] = [
    2, 0, 0, 0, 3, 8, 17, 18, 9, 5, 3, 3, 5, 11, 32, 37, 41, 45, 51, 47, 40, 37, 41, 39, 42, 45,
    43, 41, 40, 44, 43, 37, 37, 25, 17, 10, 3, 1, 0, 0, 3, 11, 19, 22, 17, 5, 3, 3, 9, 17, 37, 50,
    48, 52, 56, 53, 48, 47, 46, 48, 51, 46, 46, 50, 59, 50, 44, 40, 30, 23, 11, 8, 8, 2, 1, 2, 4,
    15, 22, 20, 12, 11, 11, 15, 26, 36, 35, 40, 35, 35, 50, 51, 57, 58, 56, 59, 58, 61, 64, 58, 62,
    58, 53, 47, 42, 28, 10, 8, 9, 1, 2, 5, 4, 20, 22, 12, 6, 8, 18, 34, 44, 46, 37, 25, 18, 28, 33,
    53, 64, 66, 77, 74, 74, 71, 68, 65, 67, 70, 59, 46, 57, 43, 16, 10, 14, 8, 5, 6, 11, 23, 12, 6,
    4, 5, 16, 43, 56, 54, 27, 9, 6, 9, 18, 49, 75, 87, 80, 80, 78, 61, 68, 60, 68, 63, 73, 79, 77,
    67, 37, 26, 17, 22, 21, 26, 34, 24, 11, 5, 5, 6, 14, 50, 69, 67, 21, 7, 5, 8, 15, 52, 83, 85,
    77, 84, 80, 61, 46, 36, 43, 57, 80, 82, 84, 78, 80, 70, 20, 27, 26, 32, 36, 22, 16, 6, 5, 10,
    29, 66, 78, 75, 41, 12, 10, 10, 19, 54, 86, 88, 90, 92, 86, 49, 24, 17, 20, 35, 73, 80, 93, 86,
    84, 77, 20, 26, 21, 18, 26, 30, 38, 24, 17, 29, 60, 78, 85, 88, 71, 32, 24, 24, 40, 74, 82, 89,
    92, 90, 86, 34, 12, 10, 11, 15, 63, 90, 92, 99, 93, 86, 21, 20, 14, 13, 14, 37, 52, 50, 53, 59,
    82, 89, 98, 100, 94, 91, 83, 84, 80, 73, 94, 91, 95, 93, 93, 35, 11, 11, 14, 19, 58, 91, 94,
    103, 98, 88, 16, 9, 4, 5, 11, 32, 51, 64, 74, 74, 85, 93, 98, 101, 102, 97, 78, 76, 82, 81, 93,
    90, 84, 92, 100, 53, 24, 16, 12, 30, 66, 87, 103, 100, 98, 94, 14, 5, 4, 3, 8, 42, 56, 61, 68,
    76, 78, 83, 78, 92, 100, 101, 93, 88, 94, 94, 88, 66, 59, 72, 84, 86, 67, 63, 41, 54, 68, 70,
    83, 102, 97, 94, 15, 5, 4, 5, 10, 34, 67, 75, 83, 81, 58, 76, 83, 89, 88, 102, 109, 114, 97,
    91, 64, 38, 34, 48, 75, 97, 101, 97, 78, 54, 41, 38, 55, 94, 104, 88, 26, 11, 10, 10, 22, 47,
    63, 61, 83, 86, 87, 75, 79, 77, 86, 103, 111, 116, 105, 78, 33, 15, 14, 19, 50, 94, 105, 94,
    62, 22, 16, 18, 35, 82, 100, 86, 42, 44, 40, 36, 54, 68, 74, 60, 72, 68, 55, 55, 59, 62, 64,
    92, 102, 110, 101, 67, 17, 11, 9, 13, 54, 102, 100, 98, 51, 17, 14, 17, 30, 82, 100, 86, 42,
    57, 57, 63, 65, 70, 79, 82, 62, 41, 26, 32, 43, 66, 79, 93, 100, 104, 93, 60, 17, 12, 11, 15,
    50, 100, 111, 98, 67, 26, 18, 24, 47, 89, 107, 91, 53, 59, 65, 76, 71, 65, 74, 85, 61, 17, 10,
    11, 14, 46, 94, 101, 90, 108, 84, 63, 31, 18, 18, 25, 67, 91, 103, 102, 90, 59, 43, 49, 71, 94,
    88, 71, 58, 57, 67, 66, 74, 46, 77, 77, 66, 17, 8, 6, 9, 40, 95, 108, 96, 90, 75, 55, 48, 34,
    56, 63, 86, 102, 108, 107, 105, 106, 85, 96, 98, 94, 75, 49, 56, 63, 68, 52, 57, 48, 68, 77,
    78, 24, 12, 10, 16, 52, 93, 95, 99, 80, 48, 34, 34, 61, 94, 86, 94, 99, 106, 118, 118, 118,
    123, 112, 103, 93, 64, 26, 65, 63, 56, 61, 45, 34, 56, 68, 85, 59, 19, 15, 26, 58, 85, 100,
    105, 72, 20, 13, 17, 38, 87, 86, 79, 97, 94, 119, 120, 124, 125, 120, 105, 97, 50, 19, 58, 56,
    49, 42, 26, 27, 33, 69, 78, 82, 52, 36, 51, 54, 61, 75, 92, 52, 15, 12, 14, 31, 69, 76, 67, 60,
    77, 105, 115, 118, 120, 120, 117, 99, 43, 19, 48, 52, 42, 30, 16, 11, 15, 46, 87, 97, 95, 60,
    32, 23, 30, 48, 81, 59, 23, 16, 19, 42, 78, 48, 26, 30, 47, 89, 112, 121, 122, 120, 117, 97,
    65, 35, 53, 57, 50, 19, 10, 8, 10, 25, 78, 88, 87, 54, 15, 11, 11, 21, 71, 72, 46, 39, 43, 71,
    87, 24, 15, 15, 27, 84, 121, 122, 118, 117, 116, 108, 95, 76, 40, 59, 56, 29, 10, 9, 12, 30,
    85, 94, 91, 58, 15, 14, 12, 26, 76, 84, 98, 94, 98, 100, 86, 30, 15, 17, 24, 84, 127, 126, 122,
    116, 120, 106, 97, 96, 50, 62, 51, 31, 14, 12, 16, 44, 86, 73, 68, 67, 26, 16, 17, 27, 95, 97,
    106, 118, 118, 116, 101, 48, 25, 24, 38, 98, 124, 127, 115, 111, 115, 105, 106, 91, 52, 43, 46,
    44, 41, 41, 46, 65, 88, 63, 68, 61, 42, 40, 37, 67, 100, 105, 97, 122, 118, 114, 115, 97, 64,
    60, 88, 108, 122, 119, 115, 111, 108, 106, 104, 94, 51, 39, 48, 56, 62, 60, 74, 67, 81, 37, 28,
    26, 36, 59, 78, 93, 80, 75, 90, 106, 119, 112, 110, 103, 97, 98, 108, 111, 115, 110, 124, 121,
    106, 98, 100, 97, 41, 43, 49, 56, 57, 53, 68, 70, 70, 30, 10, 10, 12, 46, 79, 92, 90, 91, 101,
    97, 97, 105, 97, 92, 81, 76, 101, 113, 120, 115, 114, 106, 111, 105, 93, 90, 48, 49, 44, 47,
    47, 39, 46, 59, 52, 17, 10, 12, 11, 44, 98, 86, 95, 90, 84, 102, 98, 98, 89, 65, 62, 64, 85,
    103, 110, 106, 109, 102, 104, 100, 90, 86, 44, 46, 39, 41, 19, 14, 17, 33, 51, 20, 13, 12, 16,
    49, 91, 86, 95, 99, 106, 110, 114, 88, 88, 46, 26, 32, 41, 86, 109, 99, 100, 103, 108, 97, 89,
    89, 40, 32, 47, 27, 10, 6, 6, 12, 61, 70, 29, 21, 24, 60, 83, 84, 100, 95, 89, 87, 93, 87, 84,
    26, 15, 16, 25, 67, 108, 112, 107, 112, 109, 104, 109, 92, 33, 28, 40, 24, 10, 5, 6, 12, 50,
    73, 74, 59, 63, 81, 64, 53, 80, 81, 66, 55, 59, 72, 77, 24, 15, 12, 19, 53, 102, 112, 116, 117,
    114, 111, 104, 92, 34, 31, 34, 27, 12, 9, 8, 19, 45, 73, 83, 71, 75, 75, 76, 68, 71, 46, 21,
    17, 20, 44, 82, 31, 18, 18, 24, 66, 97, 107, 121, 112, 110, 104, 99, 82, 37, 30, 36, 32, 27,
    21, 19, 33, 61, 76, 87, 85, 72, 74, 87, 86, 66, 26, 11, 12, 12, 26, 88, 79, 38, 40, 60, 93,
    102, 109, 110, 111, 97, 95, 88, 83, 32, 24, 24, 34, 38, 36, 44, 52, 62, 68, 76, 80, 69, 57, 78,
    83, 73, 32, 14, 12, 13, 24, 77, 89, 80, 71, 89, 97, 107, 105, 101, 95, 88, 87, 77, 71, 27, 19,
    25, 32, 31, 34, 55, 61, 59, 64, 72, 81, 71, 60, 73, 79, 73, 51, 19, 19, 19, 27, 71, 79, 78, 69,
    81, 88, 98, 99, 91, 85, 84, 78, 73, 68, 16, 14, 25, 29, 38, 36, 45, 46, 59, 59, 61, 78, 55, 44,
    48, 58, 70, 63, 49, 40, 52, 62, 67, 57, 48, 39, 50, 70, 85, 82, 83, 78, 78, 70, 65, 57,
];

fn get_brighteness_map() -> Image {
    let empties = [
        "empty_1748027042.json",
        "empty_1748027122.json",
        "empty_1748027135.json",
        "empty_1748027144.json",
        "empty_1748027160.json",
    ];

    let images: Vec<Image> = empties.iter().map(|e| sample_to_image(*e)).collect();

    generate_brightness_map(&images)
}

fn sample_to_image(sample_name: &str) -> Image {
    let file_contents = std::fs::read_to_string(format!("tests/samples/{sample_name}")).unwrap();
    let pixels: Vec<u8> = serde_json::from_str(&file_contents).unwrap();
    let mut img = [[0; 36]; 36];

    for (row_idx, row) in pixels.chunks(36).enumerate() {
        for (col_idx, col) in row.iter().enumerate() {
            img[row_idx][col_idx] = *col;
        }
    }

    img
}

// #[test]
// fn count_dots() {
//     let img = sample_to_image("grid_2_spacing_1748026902.json");
//     // let img = sample_to_image("grid_1_spacing_1748026825.json");
//     // let img = sample_to_image("6_3_1748027518.json");
//     // let img = sample_to_image("5_4_45_deg_1748027447.json");
//     // let img = sample_to_image("empty_1748027122.json");

//     for row in img {
//         for col in row {
//             print!("{:>3} ", col);
//         }
//         println!();
//     }

//     // let bmap = get_brighteness_map();
//     let smoothed = smooth_image(&img, 3);

//     let dots = find_dots(&smoothed);

//     dbg!(&dots);

//     todo!()
// }

#[test]
fn grid_2_spacing_grid_reconstruction_dots() {
    let mut img = [[0; 36]; 36];

    for (row_idx, row) in GRID_2_SPACING_1748026902.chunks(36).enumerate() {
        for (col_idx, col) in row.iter().enumerate() {
            img[row_idx][col_idx] = *col;
        }
    }

    let answer_key = [
        (9.0, 6.0),
        (18.0, 6.0),
        (26.0, 6.0),
        (9.0, 14.0),
        (18.0, 15.0),
        (26.0, 15.0),
        (9.0, 23.0),
        (18.0, 23.0),
        (26.0, 23.0),
    ];

    let mut found_answers = vec![false; answer_key.len()];

    let smoothed = smooth_image(&img, 3);
    let dots = find_dots(&smoothed);

    // dbg!(&dots);

    let mut no_extras = true;
    for dot in dots {
        let mut found = false;
        for (answer_idx, answer) in answer_key.iter().enumerate() {
            let diff_x = (dot.x - answer.0).abs();
            let diff_y = (dot.y - answer.1).abs();

            if diff_x < 2.0 && diff_y < 2.0 {
                found = true;
                found_answers[answer_idx] = true;
                break;
            }
        }
        if !found {
            no_extras = false;
            println!("Point: {dot:?} not in answers");
        }
    }

    let mut all_found = true;
    for (ans_idx, found) in found_answers.iter().enumerate() {
        if !*found {
            all_found = false;
            println!("Failed to find: {:?}", answer_key[ans_idx]);
        }
    }

    assert!(no_extras);
    assert!(all_found);
}

#[test]
fn grid_2_rotation() {
    let mut img = [[0; 36]; 36];

    for (row_idx, row) in GRID_2_SPACING_1748026902.chunks(36).enumerate() {
        for (col_idx, col) in row.iter().enumerate() {
            img[row_idx][col_idx] = *col;
        }
    }

    let smoothed = smooth_image(&img, 3);
    let dots_no_rotation = find_dots(&smoothed);

    let grid_no_rotation = reconstruct_grid(&dots_no_rotation, &smoothed).unwrap();

    // Its actually just off of 0 deg
    assert!((grid_no_rotation.get_angle() - 2.0).abs() < 0.1);

    let mut img = [[0; 36]; 36];

    for (row_idx, row) in GRID_2_SPACING_45_DEG_1748026976.chunks(36).enumerate() {
        for (col_idx, col) in row.iter().enumerate() {
            img[row_idx][col_idx] = *col;
        }
    }

    let smoothed = smooth_image(&img, 3);
    let dots_44_deg = find_dots(&smoothed);

    let grid_44_deg = reconstruct_grid(&dots_44_deg, &smoothed).unwrap();
    assert!((grid_44_deg.get_angle() - 44.0).abs() < 0.1)
}

#[test]
fn solve_0_4() {
    let mut img = [[0; 36]; 36];

    for (row_idx, row) in SAMPLE_0_4_1748027490.chunks(36).enumerate() {
        for (col_idx, col) in row.iter().enumerate() {
            img[row_idx][col_idx] = *col;
        }
    }

    let smoothed = smooth_image(&img, 3);
    let dots = find_dots(&smoothed);

    let grid_model = reconstruct_grid(&dots, &smoothed).unwrap();
    let codepoints = get_code_points(&grid_model, &smoothed, Direction::Left);

    // U L D U
    // U L L U
    // U D L U
    // R U L U
    let codepoints_answer = [
        [
            CodePoint::Up,
            CodePoint::Left,
            CodePoint::Down,
            CodePoint::Up,
        ],
        [
            CodePoint::Up,
            CodePoint::Left,
            CodePoint::Left,
            CodePoint::Up,
        ],
        [
            CodePoint::Up,
            CodePoint::Down,
            CodePoint::Left,
            CodePoint::Up,
        ],
        [
            CodePoint::Right,
            CodePoint::Up,
            CodePoint::Left,
            CodePoint::Up,
        ],
    ];

    for (solve_row, answer_row) in codepoints.iter().zip(codepoints_answer.iter()) {
        for (solve_col, answer_col) in solve_row.iter().zip(answer_row.iter()) {
            assert_eq!(solve_col, answer_col);
        }
    }
}

#[test]
fn solve_1_4() {
    let mut img = [[0; 36]; 36];

    for (row_idx, row) in SAMPLE_1_4_1751926548.chunks(36).enumerate() {
        for (col_idx, col) in row.iter().enumerate() {
            img[row_idx][col_idx] = *col;
        }
    }

    let smoothed = smooth_image(&img, 3);
    let dots = find_dots(&smoothed);

    let grid_model = reconstruct_grid(&dots, &smoothed).unwrap();
    let codepoints = get_code_points(&grid_model, &smoothed, Direction::Left);

    // U L L D
    // U D R R
    // R R U L
    // R U D L
    let codepoints_answer = [
        [
            CodePoint::Up,
            CodePoint::Left,
            CodePoint::Left,
            CodePoint::Down,
        ],
        [
            CodePoint::Up,
            CodePoint::Down,
            CodePoint::Right,
            CodePoint::Right,
        ],
        [
            CodePoint::Right,
            CodePoint::Right,
            CodePoint::Up,
            CodePoint::Left,
        ],
        [
            CodePoint::Right,
            CodePoint::Up,
            CodePoint::Down,
            CodePoint::Left,
        ],
    ];

    for (solve_row, answer_row) in codepoints.iter().zip(codepoints_answer.iter()) {
        for (solve_col, answer_col) in solve_row.iter().zip(answer_row.iter()) {
            assert_eq!(solve_col, answer_col);
        }
    }
}
